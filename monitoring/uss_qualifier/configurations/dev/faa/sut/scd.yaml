# See the file below (in the `schemas` folder of this repo) for the schema this file's content follows
$content_schema: monitoring/uss_qualifier/configurations/configuration/USSQualifierConfiguration.json

# This configuration uses the v1 configuration schema
v1:
  # This block defines how to perform a test run
  test_run:
    # This block defines which test action uss_qualifier should run, and what resources from the pool should be used
    action:
      test_suite:
        # suite_type is a FileReference (defined in uss_qualifier/file_io.py) to a test suite definition (see uss_qualifier/suites/README.md)
        suite_definition:
          name: scd_data_validation
          resources:
            uss1: resources.flight_planning.FlightPlannerResource
            uss2: resources.flight_planning.FlightPlannerResource
            dss: resources.astm.f3548.v21.DSSInstanceResource
            non_conflicting_flights: resources.flight_planning.FlightIntentsResource
          actions:
            - test_scenario:
                scenario_type: scenarios.astm.utm.interuss.ScdGetOpResponseDataValidationBySUT
                resources:
                  sut: uss1
                  control_uss: uss2
                  dss: dss
                  mock_uss: mock_uss
                  flight_intents: non_conflicting_flights

        # Mapping of <resource name in test suite> to <resource name in resource pool>
        resources:
          uss1: uss1
          uss2: uss2
          non_conflicting_flights: non_conflicting_flights
          dss: dss
          mock_uss: mock_uss

    # This block defines all the resources available in the resource pool.
    # Presumably all resources defined below would be used either
    #   1) directly in the test suite or
    #   2) to create another resource in the pool (see, e.g., `utm_auth` as it relates to `dss` below)
    resources:
      resource_declarations:
        # Means by which uss_qualifier can obtain authorization to make requests in an ASTM USS ecosystem
        utm_auth:
          # resource_type is a ResourceTypeName (defined in uss_qualifier/resources/definitions.py)
          resource_type: resources.communications.AuthAdapterResource
          specification:
            # To avoid putting secrets in configuration files, the auth spec (including sensitive information) will be read from the AUTH_SPEC environment variable
            environment_variable_containing_auth_spec: AUTH_SPEC

        # Set of USSs capable of being tested as flight planners
        uss1:
          $content_schema: monitoring/uss_qualifier/resources/definitions/ResourceDeclaration.json
          resource_type: resources.flight_planning.FlightPlannerResource
          dependencies:
            auth_adapter: utm_auth
          specification:
            flight_planner:
            # uss1 is the mock_uss directly exposing scdsc functionality
              participant_id: uss1
              injection_base_url: http://scdsc.uss1.localutm/scdsc
        uss2:
          $content_schema: monitoring/uss_qualifier/resources/definitions/ResourceDeclaration.json
          resource_type: resources.flight_planning.FlightPlannerResource
          dependencies:
            auth_adapter: utm_auth
          specification:
            flight_planner:
            # uss2 is another mock_uss directly exposing scdsc functionality
              participant_id: uss2
              injection_base_url: http://scdsc.log.uss6.localutm/scdsc

        # Details of conflicting flights (used in nominal planning scenario)
        non_conflicting_flights:
          resource_type: resources.flight_planning.FlightIntentsResource
          specification:
            planning_time: '0:05:00'
            file_source: file://./test_data/usa/kentland/flight_intents/non_conflicting.yaml

        # Details of flights with invalid operational intents (used in flight intent validation scenario)
        invalid_flight_intents:
          resource_type: resources.flight_planning.FlightIntentsResource
          specification:
            planning_time: '0:05:00'
            file_source: test_data.che.flight_intents.invalid_flight_intents

        # Location of DSS instance that can be used to verify flight planning outcomes
        dss:
          resource_type: resources.astm.f3548.v21.DSSInstanceResource
          dependencies:
            auth_adapter: utm_auth
          specification:
            # A USS that hosts a DSS instance is also a participant in the test, even if they don't fulfill any other roles
            participant_id: uss1
            base_url: http://dss.uss1.localutm
        mock_uss:
          resource_type: resources.interuss.MockUSSResource
          dependencies:
            auth_adapter: utm_auth
          specification:
            participant_id: mock_uss
            mock_uss_base_url: http://scdsc.log.uss6.localutm


    # When a test run is executed, a "baseline signature" is computed uniquely identifying the "baseline" of the test,
    # usually excluding exactly what systems are participating in the test (the "environment").  This is a list of
    # elements within this configuration to exclude from the configuration when computing the baseline signature.
    non_baseline_inputs:
      - v1.test_run.resources.resource_declarations.utm_auth
      - v1.test_run.resources.resource_declarations.flight_planners
      - v1.test_run.resources.resource_declarations.dss

  # This block defines artifacts related to the test run.  Note that all paths are
  # relative to where uss_qualifier is executed from, and are located inside the
  # Docker container executing uss_qualifier.
  artifacts:
    report:
      # Path to main report output
      report_path: output/report_scd_data_validation.json

    # Information about a report including a list of roles tested and which participants are attempting to fill them
    tested_roles:
      report_path: output/tested_roles_scd_data_validation

    graph:
      # Path to output GraphViz test file summarizing test run
      gv_path: output/report_scd_data_validation.gv
